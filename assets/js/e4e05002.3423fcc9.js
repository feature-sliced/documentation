"use strict";(self.webpackChunk_feature_sliced_documentation=self.webpackChunk_feature_sliced_documentation||[]).push([["7269"],{1334:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,default:()=>p,toc:()=>l,metadata:()=>s,assets:()=>a,contentTitle:()=>c});var s=JSON.parse('{"id":"guides/tech/with-electron","title":"Usage with Electron","description":"Electron applications have a special architecture consisting of multiple processes with different responsibilities. Applying FSD in such a context requires adapting the structure to the Electron specifics.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/guides/tech/with-electron.mdx","sourceDirName":"guides/tech","slug":"/guides/tech/with-electron","permalink":"/documentation/docs/guides/tech/with-electron","draft":false,"unlisted":false,"editUrl":"https://github.com/feature-sliced/documentation/edit/master/i18n/en/docusaurus-plugin-content-docs/current/guides/tech/with-electron.mdx","tags":[],"version":"current","lastUpdatedAt":1754757420000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"guidesSidebar","previous":{"title":"Migration from v2.0 to v2.1","permalink":"/documentation/docs/guides/migration/from-v2-0"},"next":{"title":"Usage with NextJS","permalink":"/documentation/docs/guides/tech/with-nextjs"}}'),r=t(4132),i=t(9447);let o={sidebar_position:10},c="Usage with Electron",a={},l=[{value:"Public API rules",id:"public-api-rules",level:2},{value:"Additional changes to the standard structure",id:"additional-changes-to-the-standard-structure",level:2},{value:"Interaction example",id:"interaction-example",level:2},{value:"See also",id:"see-also",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usage-with-electron",children:"Usage with Electron"})}),"\n",(0,r.jsx)(n.p,{children:"Electron applications have a special architecture consisting of multiple processes with different responsibilities. Applying FSD in such a context requires adapting the structure to the Electron specifics."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u2514\u2500\u2500 src\n    \u251C\u2500\u2500 app                                 # Common app layer\n    \u2502   \u251C\u2500\u2500 main                            # Main process\n    \u2502   \u2502   \u2514\u2500\u2500 index.ts                    # Main process entry point\n    \u2502   \u251C\u2500\u2500 preload                         # Preload script and Context Bridge\n    \u2502   \u2502   \u2514\u2500\u2500 index.ts                    # Preload entry point\n    \u2502   \u2514\u2500\u2500 renderer                        # Renderer process\n    \u2502       \u2514\u2500\u2500 index.html                  # Renderer process entry point\n    \u251C\u2500\u2500 main\n    \u2502   \u251C\u2500\u2500 features\n    \u2502   \u2502   \u2514\u2500\u2500 user\n    \u2502   \u2502       \u2514\u2500\u2500 ipc\n    \u2502   \u2502           \u251C\u2500\u2500 get-user.ts\n    \u2502   \u2502           \u2514\u2500\u2500 send-user.ts\n    \u2502   \u251C\u2500\u2500 entities\n    \u2502   \u2514\u2500\u2500 shared\n    \u251C\u2500\u2500 renderer\n    \u2502   \u251C\u2500\u2500 pages\n    \u2502   \u2502   \u251C\u2500\u2500 settings\n    \u2502   \u2502   \u2502   \u251C\u2500\u2500 ipc\n    \u2502   \u2502   \u2502   \u2502   \u251C\u2500\u2500 get-user.ts\n    \u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 save-user.ts\n    \u2502   \u2502   \u2502   \u251C\u2500\u2500 ui\n    \u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 user.tsx\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n    \u2502   \u2502   \u2514\u2500\u2500 home\n    \u2502   \u2502       \u251C\u2500\u2500 ui\n    \u2502   \u2502       \u2502   \u2514\u2500\u2500 home.tsx\n    \u2502   \u2502       \u2514\u2500\u2500 index.ts\n    \u2502   \u251C\u2500\u2500 widgets\n    \u2502   \u251C\u2500\u2500 features\n    \u2502   \u251C\u2500\u2500 entities\n    \u2502   \u2514\u2500\u2500 shared\n    \u2514\u2500\u2500 shared                              # Common code between main and renderer\n        \u2514\u2500\u2500 ipc                             # IPC description (event names, contracts)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"public-api-rules",children:"Public API rules"}),"\n",(0,r.jsxs)(n.p,{children:["Each process must have its own public API. For example, you can't import modules from ",(0,r.jsx)(n.code,{children:"main"})," to ",(0,r.jsx)(n.code,{children:"renderer"}),".\nOnly the ",(0,r.jsx)(n.code,{children:"src/shared"})," folder is public for both processes.\nIt's also necessary for describing contracts for process interaction."]}),"\n",(0,r.jsx)(n.h2,{id:"additional-changes-to-the-standard-structure",children:"Additional changes to the standard structure"}),"\n",(0,r.jsxs)(n.p,{children:["It's suggested to use a new ",(0,r.jsx)(n.code,{children:"ipc"})," segment, where interaction between processes takes place.\nThe ",(0,r.jsx)(n.code,{children:"pages"})," and ",(0,r.jsx)(n.code,{children:"widgets"})," layers, based on their names, should not be present in ",(0,r.jsx)(n.code,{children:"src/main"}),". You can use ",(0,r.jsx)(n.code,{children:"features"}),", ",(0,r.jsx)(n.code,{children:"entities"})," and ",(0,r.jsx)(n.code,{children:"shared"}),".\nThe ",(0,r.jsx)(n.code,{children:"app"})," layer in ",(0,r.jsx)(n.code,{children:"src"})," contains entry points for ",(0,r.jsx)(n.code,{children:"main"})," and ",(0,r.jsx)(n.code,{children:"renderer"}),", as well as the IPC.\nIt's not desirable for segments in the ",(0,r.jsx)(n.code,{children:"app"})," layer to have intersection points"]}),"\n",(0,r.jsx)(n.h2,{id:"interaction-example",children:"Interaction example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/shared/ipc/channels.ts"',children:"export const CHANNELS = {\n    GET_USER_DATA: 'GET_USER_DATA',\n    SAVE_USER: 'SAVE_USER',\n} as const;\n\nexport type TChannelKeys = keyof typeof CHANNELS;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/shared/ipc/events.ts"',children:"import { CHANNELS } from './channels';\n\nexport interface IEvents {\n    [CHANNELS.GET_USER_DATA]: {\n        args: void,\n        response?: { name: string; email: string; };\n    };\n    [CHANNELS.SAVE_USER]: {\n        args: { name: string; };\n        response: void;\n    };\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/shared/ipc/preload.ts"',children:"import { CHANNELS } from './channels';\nimport type { IEvents } from './events';\n\ntype TOptionalArgs<T> = T extends void ? [] : [args: T];\n\nexport type TElectronAPI = {\n    [K in keyof typeof CHANNELS]: (...args: TOptionalArgs<IEvents[typeof CHANNELS[K]]['args']>) => IEvents[typeof CHANNELS[K]]['response'];\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/app/preload/index.ts"',children:"import { contextBridge, ipcRenderer } from 'electron';\nimport { CHANNELS, type TElectronAPI } from 'shared/ipc';\n\nconst API: TElectronAPI = {\n    [CHANNELS.GET_USER_DATA]: () => ipcRenderer.sendSync(CHANNELS.GET_USER_DATA),\n    [CHANNELS.SAVE_USER]: args => ipcRenderer.invoke(CHANNELS.SAVE_USER, args),\n} as const;\n\ncontextBridge.exposeInMainWorld('electron', API);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/main/features/user/ipc/send-user.ts"',children:"import { ipcMain } from 'electron';\nimport { CHANNELS } from 'shared/ipc';\n\nexport const sendUser = () => {\n    ipcMain.on(CHANNELS.GET_USER_DATA, ev => {\n        ev.returnValue = {\n            name: 'John Doe',\n            email: 'john.doe@example.com',\n        };\n    });\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/renderer/pages/user-settings/ipc/get-user.ts"',children:"import { CHANNELS } from 'shared/ipc';\n\nexport const getUser = () => {\n    const user = window.electron[CHANNELS.GET_USER_DATA]();\n\n    return user ?? { name: 'John Donte', email: 'john.donte@example.com' };\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/tutorial/process-model",children:"Process Model Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/tutorial/context-isolation",children:"Context Isolation Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/tutorial/ipc",children:"Inter-Process Communication Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/feature-sliced/examples/tree/master/examples/electron",children:"Example"})}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9447:function(e,n,t){t.d(n,{Z:()=>c,a:()=>o});var s=t(9546);let r={},i=s.createContext(r);function o(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);