"use strict";(self.webpackChunk_feature_sliced_documentation=self.webpackChunk_feature_sliced_documentation||[]).push([["5617"],{6288:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>i,toc:()=>c,default:()=>h,metadata:()=>a,assets:()=>l,contentTitle:()=>o});var a=JSON.parse('{"id":"get-started/tutorial","title":"Tutorial","description":"Part 1. On paper","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/get-started/tutorial.md","sourceDirName":"get-started","slug":"/get-started/tutorial","permalink":"/documentation/uz/docs/get-started/tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/feature-sliced/documentation/edit/master/i18n/en/docusaurus-plugin-content-docs/current/get-started/tutorial.md","tags":[],"version":"current","lastUpdatedAt":1758986979000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Qisqacha","permalink":"/documentation/uz/docs/get-started/overview"},"next":{"title":"FAQ","permalink":"/documentation/uz/docs/get-started/faq"}}'),r=t(5813),s=t(6436);let i={sidebar_position:2},o="Tutorial",l={},c=[{value:"Part 1. On paper",id:"part-1-on-paper",level:2},{value:"Start by listing the pages",id:"start-by-listing-the-pages",level:3},{value:"Close look at the feed",id:"close-look-at-the-feed",level:3},{value:"List of tags",id:"list-of-tags",level:4},{value:"Articles",id:"articles",level:4},{value:"Reuse generic code",id:"reuse-generic-code",level:3},{value:"Define a strict public API",id:"define-a-strict-public-api",level:3},{value:"Large reused blocks in the UI",id:"large-reused-blocks-in-the-ui",level:3},{value:"Close look at a page with a form",id:"close-look-at-a-page-with-a-form",level:3},{value:"Summary",id:"summary",level:3},{value:"Part 2. In code",id:"part-2-in-code",level:2},{value:"Lay out the pages",id:"lay-out-the-pages",level:3},{value:"Connect the feed page",id:"connect-the-feed-page",level:3},{value:"API client",id:"api-client",level:3},{value:"Real data in the feed",id:"real-data-in-the-feed",level:3},{value:"Filtering by tag",id:"filtering-by-tag",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Header",id:"header",level:3},{value:"Tabs",id:"tabs",level:3},{value:"Article reader",id:"article-reader",level:3},{value:"Article editor",id:"article-editor",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tutorial",children:"Tutorial"})}),"\n",(0,r.jsx)(n.h2,{id:"part-1-on-paper",children:"Part 1. On paper"}),"\n",(0,r.jsxs)(n.p,{children:["This tutorial will examine the Real World App, also known as Conduit. Conduit is a basic ",(0,r.jsx)(n.a,{href:"https://medium.com/",children:"Medium"})," clone \u2014 it lets you read and write articles as well as comment on the articles of others."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Conduit home page",src:t(6549).A+"",width:"2880",height:"1504"})}),"\n",(0,r.jsxs)(n.p,{children:["This is a pretty small application, so we will keep it simple and avoid excessive decomposition. It\u2019s highly likely that the entire app will fit into just three layers: ",(0,r.jsx)(n.strong,{children:"App"}),", ",(0,r.jsx)(n.strong,{children:"Pages"}),", and ",(0,r.jsx)(n.strong,{children:"Shared"}),". If not, we will introduce additional layers as we go. Ready?"]}),"\n",(0,r.jsx)(n.h3,{id:"start-by-listing-the-pages",children:"Start by listing the pages"}),"\n",(0,r.jsx)(n.p,{children:"If we look at the screenshot above, we can assume at least the following pages:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Home (article feed)"}),"\n",(0,r.jsx)(n.li,{children:"Sign in and sign up"}),"\n",(0,r.jsx)(n.li,{children:"Article reader"}),"\n",(0,r.jsx)(n.li,{children:"Article editor"}),"\n",(0,r.jsx)(n.li,{children:"User profile viewer"}),"\n",(0,r.jsx)(n.li,{children:"User profile editor (user settings)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Every one of these pages will become its own ",(0,r.jsx)(n.em,{children:"slice"})," on the Pages ",(0,r.jsx)(n.em,{children:"layer"}),". Recall from the overview that slices are simply folders inside of layers and layers are simply folders with predefined names like ",(0,r.jsx)(n.code,{children:"pages"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"As such, our Pages folder will look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u{1F4C2} pages/\n  \u{1F4C1} feed/\n  \u{1F4C1} sign-in/\n  \u{1F4C1} article-read/\n  \u{1F4C1} article-edit/\n  \u{1F4C1} profile/\n  \u{1F4C1} settings/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The key difference of Feature-Sliced Design from an unregulated code structure is that pages cannot reference each other. That is, one page cannot import code from another page. This is due to the ",(0,r.jsx)(n.strong,{children:"import rule on layers"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"A module (file) in a slice can only import other slices when they are located on layers strictly below."})}),"\n",(0,r.jsx)(n.p,{children:"In this case, a page is a slice, so modules (files) inside this page can only reference code from layers below, not from the same layer, Pages."}),"\n",(0,r.jsx)(n.h3,{id:"close-look-at-the-feed",children:"Close look at the feed"}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Anonymous user\u2019s perspective",src:t(6549).A+"",width:"2880",height:"1504"})}),(0,r.jsx)("figcaption",{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Anonymous user\u2019s perspective"})})})]}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Authenticated user\u2019s perspective",src:t(4919).A+"",width:"2880",height:"1504"})}),(0,r.jsx)("figcaption",{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Authenticated user\u2019s perspective"})})})]}),"\n",(0,r.jsx)(n.p,{children:"There are three dynamic areas on the feed page:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Sign-in links with an indication if you are signed in"}),"\n",(0,r.jsx)(n.li,{children:"List of tags that triggers filtering in the feed"}),"\n",(0,r.jsx)(n.li,{children:"One/two feeds of articles, each article with a like button"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The sign-in links are a part of a header that is common to all pages, we will revisit it separately."}),"\n",(0,r.jsx)(n.h4,{id:"list-of-tags",children:"List of tags"}),"\n",(0,r.jsxs)(n.p,{children:["To build the list of tags, we need to fetch the available tags, render each tag as a chip, and store the selected tags in a client-side storage. These operations fall into categories \u201CAPI interaction\u201D, \u201Cuser interface\u201D, and \u201Cstorage\u201D, respectively. In Feature-Sliced Design, code is separated by purpose using ",(0,r.jsx)(n.em,{children:"segments"}),". Segments are folders in slices, and they can have arbitrary names that describe the purpose, but some purposes are so common that there\u2019s a convention for certain segment names:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"api/"})," for backend interactions"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"ui/"})," for code that handles rendering and appearance"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"model/"})," for storage and business logic"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"config/"})," for feature flags, environment variables and other forms of configuration"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We will place code that fetches tags into ",(0,r.jsx)(n.code,{children:"api"}),", the tag component into ",(0,r.jsx)(n.code,{children:"ui"}),", and the storage interaction into ",(0,r.jsx)(n.code,{children:"model"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"articles",children:"Articles"}),"\n",(0,r.jsx)(n.p,{children:"Using the same grouping principles, we can decompose the feed of articles into the same three segments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"api/"}),": fetch paginated articles with like count; like an article"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"ui/"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"tab list that can render an extra tab if a tag is selected"}),"\n",(0,r.jsx)(n.li,{children:"individual article"}),"\n",(0,r.jsx)(n.li,{children:"functional pagination"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"model/"}),": client-side storage of the currently loaded articles and current page (if needed)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"reuse-generic-code",children:"Reuse generic code"}),"\n",(0,r.jsxs)(n.p,{children:["Most pages are very different in intent, but certain things stay the same across the entire app \u2014 for example, the UI kit that conforms to the design language, or the convention on the backend that everything is done with a REST API with the same authentication method. Since slices are meant to be isolated, code reuse is facilitated by a lower layer, ",(0,r.jsx)(n.strong,{children:"Shared"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Shared is different from other layers in the sense that it contains segments, not slices. In this way, the Shared layer can be thought of as a hybrid between a layer and a slice."}),"\n",(0,r.jsx)(n.p,{children:"Usually, the code in Shared is not planned ahead of time, but rather extracted during development, because only during development does it become clear which parts of code are actually shared. However, it\u2019s still helpful to keep a mental note of what kind of code naturally belongs in Shared:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"ui/"})," \u2014 the UI kit, pure appearance, no business logic. For example, buttons, modal dialogs, form inputs."]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"api/"})," \u2014 convenience wrappers around request making primitives (like ",(0,r.jsx)(n.code,{children:"fetch()"})," on the Web) and, optionally, functions for triggering particular requests according to the backend specification."]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"config/"})," \u2014 parsing environment variables"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"i18n/"})," \u2014 configuration of language support"]}),"\n",(0,r.jsxs)(n.li,{children:["\u{1F4C2}\xa0",(0,r.jsx)(n.code,{children:"router/"})," \u2014 routing primitives and route constants"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Those are just a few examples of segment names in Shared, but you can omit any of them or create your own. The only important thing to remember when creating new segments is that segment names should describe ",(0,r.jsx)(n.strong,{children:"purpose (the why), not essence (the what)"}),". Names like \u201Ccomponents\u201D, \u201Chooks\u201D, \u201Cmodals\u201D ",(0,r.jsx)(n.em,{children:"should not"})," be used because they describe what these files are, but don\u2019t help to navigate the code inside. This requires people on the team to dig through every file in such folders and also keeps unrelated code close, which leads to broad areas of code being affected by refactoring and thus makes code review and testing harder."]}),"\n",(0,r.jsx)(n.h3,{id:"define-a-strict-public-api",children:"Define a strict public API"}),"\n",(0,r.jsxs)(n.p,{children:["In the context of Feature-Sliced Design, the term ",(0,r.jsx)(n.em,{children:"public API"})," refers to a slice or segment declaring what can be imported from it by other modules in the project. For example, in JavaScript that can be an ",(0,r.jsx)(n.code,{children:"index.js"})," file re-exporting objects from other files in the slice. This enables freedom in refactoring code inside a slice as long as the contract with the outside world (i.e. the public API) stays the same."]}),"\n",(0,r.jsx)(n.p,{children:"For the Shared layer that has no slices, it\u2019s usually more convenient to define a separate public API for each segment as opposed to defining one single index of everything in Shared. This keeps imports from Shared naturally organized by intent. For other layers that have slices, the opposite is true \u2014 it\u2019s usually more practical to define one index per slice and let the slice decide its own set of segments that is unknown to the outside world because other layers usually have a lot less exports."}),"\n",(0,r.jsx)(n.p,{children:"Our slices/segments will appear to each other as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u{1F4C2} pages/\n  \u{1F4C2} feed/\n    \u{1F4C4} index\n  \u{1F4C2} sign-in/\n    \u{1F4C4} index\n  \u{1F4C2} article-read/\n    \u{1F4C4} index\n  \u{1F4C1} \u2026\n\u{1F4C2} shared/\n  \u{1F4C2} ui/\n    \u{1F4C4} index\n  \u{1F4C2} api/\n    \u{1F4C4} index\n  \u{1F4C1} \u2026\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Whatever is inside folders like ",(0,r.jsx)(n.code,{children:"pages/feed"})," or ",(0,r.jsx)(n.code,{children:"shared/ui"})," is only known to those folders, and other files should not rely on the internal structure of these folders."]}),"\n",(0,r.jsx)(n.h3,{id:"large-reused-blocks-in-the-ui",children:"Large reused blocks in the UI"}),"\n",(0,r.jsx)(n.p,{children:"Earlier we made a note to revisit the header that appears on every page. Rebuilding it from scratch on every page would be impractical, so it\u2019s only natural to want to reuse it. We already have Shared to facilitate code reuse, however, there\u2019s a caveat to putting large blocks of UI in Shared \u2014 the Shared layer is not supposed to know about any of the layers above."}),"\n",(0,r.jsx)(n.p,{children:"Between Shared and Pages there are three other layers: Entities, Features, and Widgets.  Some projects may have something in those layers that they need in a large reusable block, and that means we can\u2019t put that reusable block in Shared, or else it would be importing from upper layers, which is prohibited. That\u2019s where the Widgets layer comes in. It is located above Shared, Entities, and Features, so it can use them all."}),"\n",(0,r.jsxs)(n.p,{children:["In our case, the header is very simple \u2014 it\u2019s a static logo and top-level navigation. The navigation needs to make a request to the API to determine if the user is currently logged in or not, but that can be handled by a simple import from the ",(0,r.jsx)(n.code,{children:"api"})," segment. Therefore, we will keep our header in Shared."]}),"\n",(0,r.jsx)(n.h3,{id:"close-look-at-a-page-with-a-form",children:"Close look at a page with a form"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s also examine a page that\u2019s intended for editing, not reading. For example, the article writer:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Conduit post editor",src:t(5888).A+"",width:"2880",height:"1200"})}),"\n",(0,r.jsx)(n.p,{children:"It looks trivial, but contains several aspects of application development that we haven\u2019t explored yet \u2014 form validation, error states, and data persistence."}),"\n",(0,r.jsxs)(n.p,{children:["If we were to build this page, we would grab some inputs and buttons from Shared and put together a form in the ",(0,r.jsx)(n.code,{children:"ui"})," segment of this page. Then, in the ",(0,r.jsx)(n.code,{children:"api"})," segment, we would define a mutation request to create the article on the backend."]}),"\n",(0,r.jsxs)(n.p,{children:["To validate the request before sending, we need a validation schema, and a good place for it is the ",(0,r.jsx)(n.code,{children:"model"})," segment, since it\u2019s the data model. There we will produce error messages and display them using another component in the ",(0,r.jsx)(n.code,{children:"ui"})," segment."]}),"\n",(0,r.jsxs)(n.p,{children:["To improve user experience, we could also persist the inputs to prevent accidental data loss. This is also a job of the ",(0,r.jsx)(n.code,{children:"model"})," segment."]}),"\n",(0,r.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"We have examined several pages and outlined a preliminary structure for our application:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Shared layer","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ui"}),"  will contain our reusable UI kit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"api"}),"  will contain our primitive interactions with the backend"]}),"\n",(0,r.jsx)(n.li,{children:"The rest will be arranged on demand"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Pages layer \u2014 each page is a separate slice","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ui"}),"  will contain the page itself and all of its parts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"api"}),"  will contain more specialized data fetching, using ",(0,r.jsx)(n.code,{children:"shared/api"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model"}),"  might contain client-side storage of the data that we will display"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s get building!"}),"\n",(0,r.jsx)(n.h2,{id:"part-2-in-code",children:"Part 2. In code"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have a plan, let\u2019s put it to practice. We will use React and ",(0,r.jsx)(n.a,{href:"https://remix.run",children:"Remix"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["There's a template ready for this project, clone it from GitHub to get a headstart: ",(0,r.jsx)(n.a,{href:"https://github.com/feature-sliced/tutorial-conduit/tree/clean",children:"https://github.com/feature-sliced/tutorial-conduit/tree/clean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Install dependencies with ",(0,r.jsx)(n.code,{children:"npm install"})," and start the development server with ",(0,r.jsx)(n.code,{children:"npm run dev"}),". Open ",(0,r.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," and you should see a blank app."]}),"\n",(0,r.jsx)(n.h3,{id:"lay-out-the-pages",children:"Lay out the pages"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s start by creating blank components for all our pages. Run the following command in your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx fsd pages feed sign-in article-read article-edit profile settings --segments ui\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will create folders like ",(0,r.jsx)(n.code,{children:"pages/feed/ui/"})," and an index file, ",(0,r.jsx)(n.code,{children:"pages/feed/index.ts"}),", for every page."]}),"\n",(0,r.jsx)(n.h3,{id:"connect-the-feed-page",children:"Connect the feed page"}),"\n",(0,r.jsxs)(n.p,{children:["Let\u2019s connect the root route of our application to the feed page. Create a component, ",(0,r.jsx)(n.code,{children:"FeedPage.tsx"})," in ",(0,r.jsx)(n.code,{children:"pages/feed/ui"})," and put the following inside it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/FeedPage.tsx"',children:'export function FeedPage() {\n  return (\n    <div className="home-page">\n      <div className="banner">\n        <div className="container">\n          <h1 className="logo-font">conduit</h1>\n          <p>A place to share your knowledge.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then re-export this component in the feed page\u2019s public API, the ",(0,r.jsx)(n.code,{children:"pages/feed/index.ts"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="pages/feed/index.ts"',children:'export { FeedPage } from "./ui/FeedPage";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now connect it to the root route. In Remix, routing is file-based, and the route files are located in the ",(0,r.jsx)(n.code,{children:"app/routes"})," folder, which nicely coincides with Feature-Sliced Design."]}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"FeedPage"})," component in ",(0,r.jsx)(n.code,{children:"app/routes/_index.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/_index.tsx"',children:'import type { MetaFunction } from "@remix-run/node";\nimport { FeedPage } from "pages/feed";\n\nexport const meta: MetaFunction = () => {\n  return [{ title: "Conduit" }];\n};\n\nexport default FeedPage;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, if you run the dev server and open the application, you should see the Conduit banner!"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The banner of Conduit",src:t(1565).A+"",width:"2880",height:"338"})}),"\n",(0,r.jsx)(n.h3,{id:"api-client",children:"API client"}),"\n",(0,r.jsxs)(n.p,{children:["To talk to the RealWorld backend, let\u2019s create a convenient API client in Shared. Create two segments, ",(0,r.jsx)(n.code,{children:"api"})," for the client and ",(0,r.jsx)(n.code,{children:"config"})," for variables like the backend base URL:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx fsd shared --segments api config\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then create ",(0,r.jsx)(n.code,{children:"shared/config/backend.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/config/backend.ts"',children:'export { mockBackendUrl as backendBaseUrl } from "mocks/handlers";\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/config/index.ts"',children:'export { backendBaseUrl } from "./backend";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Since the RealWorld project conveniently provides an ",(0,r.jsx)(n.a,{href:"https://github.com/gothinkster/realworld/blob/main/api/openapi.yml",children:"OpenAPI specification"}),", we can take advantage of auto-generated types for our client. We will use ",(0,r.jsxs)(n.a,{href:"https://openapi-ts.pages.dev/openapi-fetch/",children:["the ",(0,r.jsx)(n.code,{children:"openapi-fetch"})," package"]})," that comes with an additional type generator."]}),"\n",(0,r.jsx)(n.p,{children:"Run the following command to generate up-to-date API typings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run generate-api-types\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will create a file ",(0,r.jsx)(n.code,{children:"shared/api/v1.d.ts"}),". We will use this file to create a typed API client in ",(0,r.jsx)(n.code,{children:"shared/api/client.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/client.ts"',children:'import createClient from "openapi-fetch";\n\nimport { backendBaseUrl } from "shared/config";\nimport type { paths } from "./v1";\n\nexport const { GET, POST, PUT, DELETE } = createClient<paths>({ baseUrl: backendBaseUrl });\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/index.ts"',children:'export { GET, POST, PUT, DELETE } from "./client";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"real-data-in-the-feed",children:"Real data in the feed"}),"\n",(0,r.jsx)(n.p,{children:"We can now proceed to adding articles to the feed, fetched from the backend. Let\u2019s begin by implementing an article preview component."}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"pages/feed/ui/ArticlePreview.tsx"})," with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/ArticlePreview.tsx"',children:"export function ArticlePreview({ article }) { /* TODO */ }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Since we\u2019re writing in TypeScript, it would be nice to have a typed article object. If we explore the generated ",(0,r.jsx)(n.code,{children:"v1.d.ts"}),", we can see that the article object is available through ",(0,r.jsx)(n.code,{children:'components["schemas"]["Article"]'}),". So let\u2019s create a file with our data models in Shared and export the models:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/models.ts"',children:'import type { components } from "./v1";\n\nexport type Article = components["schemas"]["Article"];\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/index.ts"',children:'export { GET, POST, PUT, DELETE } from "./client";\n\nexport type { Article } from "./models";\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now we can come back to the article preview component and fill the markup with data. Update the component with the following content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/ArticlePreview.tsx"',children:'import { Link } from "@remix-run/react";\nimport type { Article } from "shared/api";\n\ninterface ArticlePreviewProps {\n  article: Article;\n}\n\nexport function ArticlePreview({ article }: ArticlePreviewProps) {\n  return (\n    <div className="article-preview">\n      <div className="article-meta">\n        <Link to={`/profile/${article.author.username}`} prefetch="intent">\n          <img src={article.author.image} alt="" />\n        </Link>\n        <div className="info">\n          <Link\n            to={`/profile/${article.author.username}`}\n            className="author"\n            prefetch="intent"\n          >\n            {article.author.username}\n          </Link>\n          <span className="date" suppressHydrationWarning>\n            {new Date(article.createdAt).toLocaleDateString(undefined, {\n              dateStyle: "long",\n            })}\n          </span>\n        </div>\n        <button className="btn btn-outline-primary btn-sm pull-xs-right">\n          <i className="ion-heart"></i> {article.favoritesCount}\n        </button>\n      </div>\n      <Link\n        to={`/article/${article.slug}`}\n        className="preview-link"\n        prefetch="intent"\n      >\n        <h1>{article.title}</h1>\n        <p>{article.description}</p>\n        <span>Read more...</span>\n        <ul className="tag-list">\n          {article.tagList.map((tag) => (\n            <li key={tag} className="tag-default tag-pill tag-outline">\n              {tag}\n            </li>\n          ))}\n        </ul>\n      </Link>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The like button doesn\u2019t do anything for now, we will fix that when we get to the article reader page and implement the liking functionality."}),"\n",(0,r.jsxs)(n.p,{children:["Now we can fetch the articles and render out a bunch of these cards. Fetching data in Remix is done with ",(0,r.jsx)(n.em,{children:"loaders"})," \u2014 server-side functions that fetch exactly what a page needs. Loaders interact with the API on the page\u2019s behalf, so we will put them in the ",(0,r.jsx)(n.code,{children:"api"})," segment of a page:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/api/loader.ts"',children:'import { json } from "@remix-run/node";\n\nimport { GET } from "shared/api";\n\nexport const loader = async () => {\n  const { data: articles, error, response } = await GET("/articles");\n\n  if (error !== undefined) {\n    throw json(error, { status: response.status });\n  }\n\n  return json({ articles });\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To connect it to the page, we need to export it with the name ",(0,r.jsx)(n.code,{children:"loader"})," from the route file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/index.ts"',children:'export { FeedPage } from "./ui/FeedPage";\nexport { loader } from "./api/loader";\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/_index.tsx"',children:'import type { MetaFunction } from "@remix-run/node";\nimport { FeedPage } from "pages/feed";\n\nexport { loader } from "pages/feed";\n\nexport const meta: MetaFunction = () => {\n  return [{ title: "Conduit" }];\n};\n\nexport default FeedPage;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["And the final step is to render these cards in the feed. Update your ",(0,r.jsx)(n.code,{children:"FeedPage"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/FeedPage.tsx"',children:'import { useLoaderData } from "@remix-run/react";\n\nimport type { loader } from "../api/loader";\nimport { ArticlePreview } from "./ArticlePreview";\n\nexport function FeedPage() {\n  const { articles } = useLoaderData<typeof loader>();\n\n  return (\n    <div className="home-page">\n      <div className="banner">\n        <div className="container">\n          <h1 className="logo-font">conduit</h1>\n          <p>A place to share your knowledge.</p>\n        </div>\n      </div>\n\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-9">\n            {articles.articles.map((article) => (\n              <ArticlePreview key={article.slug} article={article} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"filtering-by-tag",children:"Filtering by tag"}),"\n",(0,r.jsxs)(n.p,{children:["Regarding the tags, our job is to fetch them from the backend and to store the currently selected tag. We already know how to do fetching \u2014 it\u2019s another request from the loader. We will use a convenience function ",(0,r.jsx)(n.code,{children:"promiseHash"})," from a package ",(0,r.jsx)(n.code,{children:"remix-utils"}),", which is already installed."]}),"\n",(0,r.jsxs)(n.p,{children:["Update the loader file, ",(0,r.jsx)(n.code,{children:"pages/feed/api/loader.ts"}),", with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/api/loader.ts"',children:'import { json } from "@remix-run/node";\nimport type { FetchResponse } from "openapi-fetch";\nimport { promiseHash } from "remix-utils/promise";\n\nimport { GET } from "shared/api";\n\nasync function throwAnyErrors<T, O, Media extends `${string}/${string}`>(\n  responsePromise: Promise<FetchResponse<T, O, Media>>,\n) {\n  const { data, error, response } = await responsePromise;\n\n  if (error !== undefined) {\n    throw json(error, { status: response.status });\n  }\n\n  return data as NonNullable<typeof data>;\n}\n\nexport const loader = async () => {\n  return json(\n    await promiseHash({\n      articles: throwAnyErrors(GET("/articles")),\n      tags: throwAnyErrors(GET("/tags")),\n    }),\n  );\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You might notice that we extracted the error handling into a generic function ",(0,r.jsx)(n.code,{children:"throwAnyErrors"}),". It looks pretty useful, so we might want to reuse it later, but for now let\u2019s just keep an eye on it."]}),"\n",(0,r.jsx)(n.p,{children:"Now, to the list of tags. It needs to be interactive \u2014 clicking on a tag should make that tag selected. By Remix convention, we will use the URL search parameters as our storage for the selected tag. Let the browser take care of storage while we focus on more important things."}),"\n",(0,r.jsxs)(n.p,{children:["Update ",(0,r.jsx)(n.code,{children:"pages/feed/ui/FeedPage.tsx"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/FeedPage.tsx"',children:'import { Form, useLoaderData } from "@remix-run/react";\nimport { ExistingSearchParams } from "remix-utils/existing-search-params";\n\nimport type { loader } from "../api/loader";\nimport { ArticlePreview } from "./ArticlePreview";\n\nexport function FeedPage() {\n  const { articles, tags } = useLoaderData<typeof loader>();\n\n  return (\n    <div className="home-page">\n      <div className="banner">\n        <div className="container">\n          <h1 className="logo-font">conduit</h1>\n          <p>A place to share your knowledge.</p>\n        </div>\n      </div>\n\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-9">\n            {articles.articles.map((article) => (\n              <ArticlePreview key={article.slug} article={article} />\n            ))}\n          </div>\n\n          <div className="col-md-3">\n            <div className="sidebar">\n              <p>Popular Tags</p>\n\n              <Form>\n                <ExistingSearchParams exclude={["tag"]} />\n                <div className="tag-list">\n                  {tags.tags.map((tag) => (\n                    <button\n                      key={tag}\n                      name="tag"\n                      value={tag}\n                      className="tag-pill tag-default"\n                    >\n                      {tag}\n                    </button>\n                  ))}\n                </div>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} \n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then we need to use the ",(0,r.jsx)(n.code,{children:"tag"})," search parameter in our loader. Change the ",(0,r.jsx)(n.code,{children:"loader"})," function in ",(0,r.jsx)(n.code,{children:"pages/feed/api/loader.ts"})," to the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/api/loader.ts"',children:'import { json, type LoaderFunctionArgs } from "@remix-run/node";\nimport type { FetchResponse } from "openapi-fetch";\nimport { promiseHash } from "remix-utils/promise";\n\nimport { GET } from "shared/api";\n\nasync function throwAnyErrors<T, O, Media extends `${string}/${string}`>(\n  responsePromise: Promise<FetchResponse<T, O, Media>>,\n) {\n  const { data, error, response } = await responsePromise;\n\n  if (error !== undefined) {\n    throw json(error, { status: response.status });\n  }\n\n  return data as NonNullable<typeof data>;\n}\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const url = new URL(request.url);\n  const selectedTag = url.searchParams.get("tag") ?? undefined;\n\n  return json(\n    await promiseHash({\n      articles: throwAnyErrors(\n        GET("/articles", { params: { query: { tag: selectedTag } } }),\n      ),\n      tags: throwAnyErrors(GET("/tags")),\n    }),\n  );\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["That\u2019s it, no ",(0,r.jsx)(n.code,{children:"model"})," segment necessary. Remix is pretty neat."]}),"\n",(0,r.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,r.jsx)(n.p,{children:"In a similar fashion, we can implement the pagination. Feel free to give it a shot yourself or just copy the code below. There\u2019s no one to judge you anyway."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/api/loader.ts"',children:'import { json, type LoaderFunctionArgs } from "@remix-run/node";\nimport type { FetchResponse } from "openapi-fetch";\nimport { promiseHash } from "remix-utils/promise";\n\nimport { GET } from "shared/api";\n\nasync function throwAnyErrors<T, O, Media extends `${string}/${string}`>(\n  responsePromise: Promise<FetchResponse<T, O, Media>>,\n) {\n  const { data, error, response } = await responsePromise;\n\n  if (error !== undefined) {\n    throw json(error, { status: response.status });\n  }\n\n  return data as NonNullable<typeof data>;\n}\n\n/** Amount of articles on one page. */\nexport const LIMIT = 20;\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const url = new URL(request.url);\n  const selectedTag = url.searchParams.get("tag") ?? undefined;\n  const page = parseInt(url.searchParams.get("page") ?? "", 10);\n\n  return json(\n    await promiseHash({\n      articles: throwAnyErrors(\n        GET("/articles", {\n          params: {\n            query: {\n              tag: selectedTag,\n              limit: LIMIT,\n              offset: !Number.isNaN(page) ? page * LIMIT : undefined,\n            },\n          },\n        }),\n      ),\n      tags: throwAnyErrors(GET("/tags")),\n    }),\n  );\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/FeedPage.tsx"',children:'import { Form, useLoaderData, useSearchParams } from "@remix-run/react";\nimport { ExistingSearchParams } from "remix-utils/existing-search-params";\n\nimport { LIMIT, type loader } from "../api/loader";\nimport { ArticlePreview } from "./ArticlePreview";\n\nexport function FeedPage() {\n  const [searchParams] = useSearchParams();\n  const { articles, tags } = useLoaderData<typeof loader>();\n  const pageAmount = Math.ceil(articles.articlesCount / LIMIT);\n  const currentPage = parseInt(searchParams.get("page") ?? "1", 10);\n\n  return (\n    <div className="home-page">\n      <div className="banner">\n        <div className="container">\n          <h1 className="logo-font">conduit</h1>\n          <p>A place to share your knowledge.</p>\n        </div>\n      </div>\n\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-9">\n            {articles.articles.map((article) => (\n              <ArticlePreview key={article.slug} article={article} />\n            ))}\n\n            <Form>\n              <ExistingSearchParams exclude={["page"]} />\n              <ul className="pagination">\n                {Array(pageAmount)\n                  .fill(null)\n                  .map((_, index) =>\n                    index + 1 === currentPage ? (\n                      <li key={index} className="page-item active">\n                        <span className="page-link">{index + 1}</span>\n                      </li>\n                    ) : (\n                      <li key={index} className="page-item">\n                        <button\n                          className="page-link"\n                          name="page"\n                          value={index + 1}\n                        >\n                          {index + 1}\n                        </button>\n                      </li>\n                    ),\n                  )}\n              </ul>\n            </Form>\n          </div>\n\n          <div className="col-md-3">\n            <div className="sidebar">\n              <p>Popular Tags</p>\n\n              <Form>\n                <ExistingSearchParams exclude={["tag", "page"]} />\n                <div className="tag-list">\n                  {tags.tags.map((tag) => (\n                    <button\n                      key={tag}\n                      name="tag"\n                      value={tag}\n                      className="tag-pill tag-default"\n                    >\n                      {tag}\n                    </button>\n                  ))}\n                </div>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"So that\u2019s also done. There\u2019s also the tab list that can be similarly implemented, but let\u2019s hold on to that until we implement authentication. Speaking of which!"}),"\n",(0,r.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["Authentication involves two pages \u2014 one to login and another to register. They are mostly the same, so it makes sense to keep them in the same slice, ",(0,r.jsx)(n.code,{children:"sign-in"}),", so that they can reuse code if needed."]}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"RegisterPage.tsx"})," in the ",(0,r.jsx)(n.code,{children:"ui"})," segment of ",(0,r.jsx)(n.code,{children:"pages/sign-in"})," with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/sign-in/ui/RegisterPage.tsx"',children:'import { Form, Link, useActionData } from "@remix-run/react";\n\nimport type { register } from "../api/register";\n\nexport function RegisterPage() {\n  const registerData = useActionData<typeof register>();\n\n  return (\n    <div className="auth-page">\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-6 offset-md-3 col-xs-12">\n            <h1 className="text-xs-center">Sign up</h1>\n            <p className="text-xs-center">\n              <Link to="/login">Have an account?</Link>\n            </p>\n\n            {registerData?.error && (\n              <ul className="error-messages">\n                {registerData.error.errors.body.map((error) => (\n                  <li key={error}>{error}</li>\n                ))}\n              </ul>\n            )}\n\n            <Form method="post">\n              <fieldset className="form-group">\n                <input\n                  className="form-control form-control-lg"\n                  type="text"\n                  name="username"\n                  placeholder="Username"\n                />\n              </fieldset>\n              <fieldset className="form-group">\n                <input\n                  className="form-control form-control-lg"\n                  type="text"\n                  name="email"\n                  placeholder="Email"\n                />\n              </fieldset>\n              <fieldset className="form-group">\n                <input\n                  className="form-control form-control-lg"\n                  type="password"\n                  name="password"\n                  placeholder="Password"\n                />\n              </fieldset>\n              <button className="btn btn-lg btn-primary pull-xs-right">\n                Sign up\n              </button>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We have a broken import to fix now. It involves a new segment, so create that:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx fsd pages sign-in -s api\n"})}),"\n",(0,r.jsx)(n.p,{children:"However, before we can implement the backend part of registering, we need some infrastructure code for Remix to handle sessions. That goes to Shared, in case any other page needs it."}),"\n",(0,r.jsxs)(n.p,{children:["Put the following code in ",(0,r.jsx)(n.code,{children:"shared/api/auth.server.ts"}),". This is highly Remix-specific, so don\u2019t worry too much about it, just copy-paste:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/auth.server.ts"',children:'import { createCookieSessionStorage, redirect } from "@remix-run/node";\nimport invariant from "tiny-invariant";\n\nimport type { User } from "./models";\n\ninvariant(\n  process.env.SESSION_SECRET,\n  "SESSION_SECRET must be set for authentication to work",\n);\n\nconst sessionStorage = createCookieSessionStorage<{\n  user: User;\n}>({\n  cookie: {\n    name: "__session",\n    httpOnly: true,\n    path: "/",\n    sameSite: "lax",\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === "production",\n  },\n});\n\nexport async function createUserSession({\n  request,\n  user,\n  redirectTo,\n}: {\n  request: Request;\n  user: User;\n  redirectTo: string;\n}) {\n  const cookie = request.headers.get("Cookie");\n  const session = await sessionStorage.getSession(cookie);\n\n  session.set("user", user);\n\n  return redirect(redirectTo, {\n    headers: {\n      "Set-Cookie": await sessionStorage.commitSession(session, {\n        maxAge: 60 * 60 * 24 * 7, // 7 days\n      }),\n    },\n  });\n}\n\nexport async function getUserFromSession(request: Request) {\n  const cookie = request.headers.get("Cookie");\n  const session = await sessionStorage.getSession(cookie);\n\n  return session.get("user") ?? null;\n}\n\nexport async function requireUser(request: Request) {\n  const user = await getUserFromSession(request);\n\n  if (user === null) {\n    throw redirect("/login");\n  }\n\n  return user;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["And also export the ",(0,r.jsx)(n.code,{children:"User"})," model from the ",(0,r.jsx)(n.code,{children:"models.ts"})," file right next to it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/models.ts"',children:'import type { components } from "./v1";\n\nexport type Article = components["schemas"]["Article"];\nexport type User = components["schemas"]["User"];\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Before this code can work, the ",(0,r.jsx)(n.code,{children:"SESSION_SECRET"})," environment variable needs to be set. Create a file called ",(0,r.jsx)(n.code,{children:".env"})," in the root of the project, write ",(0,r.jsx)(n.code,{children:"SESSION_SECRET="})," and then mash some keys on your keyboard to create a long random string. You should get something like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title=".env"',children:"SESSION_SECRET=dontyoudarecopypastethis\n"})}),"\n",(0,r.jsx)(n.p,{children:"Finally, add some exports to the public API to make use of this code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/index.ts"',children:'export { GET, POST, PUT, DELETE } from "./client";\n\nexport type { Article } from "./models";\n\nexport { createUserSession, getUserFromSession, requireUser } from "./auth.server";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now we can write the code that will talk to the RealWorld backend to actually do the registration. We will keep that in ",(0,r.jsx)(n.code,{children:"pages/sign-in/api"}),". Create a file called ",(0,r.jsx)(n.code,{children:"register.ts"})," and put the following code inside:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/sign-in/api/register.ts"',children:'import { json, type ActionFunctionArgs } from "@remix-run/node";\n\nimport { POST, createUserSession } from "shared/api";\n\nexport const register = async ({ request }: ActionFunctionArgs) => {\n  const formData = await request.formData();\n  const username = formData.get("username")?.toString() ?? "";\n  const email = formData.get("email")?.toString() ?? "";\n  const password = formData.get("password")?.toString() ?? "";\n\n  const { data, error } = await POST("/users", {\n    body: { user: { email, password, username } },\n  });\n\n  if (error) {\n    return json({ error }, { status: 400 });\n  } else {\n    return createUserSession({\n      request: request,\n      user: data.user,\n      redirectTo: "/",\n    });\n  }\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/sign-in/index.ts"',children:"export { RegisterPage } from './ui/RegisterPage';\nexport { register } from './api/register';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Almost done! Just need to connect the page and action to the ",(0,r.jsx)(n.code,{children:"/register"})," route. Create ",(0,r.jsx)(n.code,{children:"register.tsx"})," in ",(0,r.jsx)(n.code,{children:"app/routes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/register.tsx"',children:'import { RegisterPage, register } from "pages/sign-in";\n\nexport { register as action };\n\nexport default RegisterPage;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now if you go to ",(0,r.jsx)(n.a,{href:"http://localhost:3000/register",children:"http://localhost:3000/register"}),", you should be able to create a user! The rest of the application won\u2019t react to this yet, we\u2019ll address that momentarily."]}),"\n",(0,r.jsx)(n.p,{children:"In a very similar way, we can implement the login page. Give it a try or just grab the code and move on:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/sign-in/api/sign-in.ts"',children:'import { json, type ActionFunctionArgs } from "@remix-run/node";\n\nimport { POST, createUserSession } from "shared/api";\n\nexport const signIn = async ({ request }: ActionFunctionArgs) => {\n  const formData = await request.formData();\n  const email = formData.get("email")?.toString() ?? "";\n  const password = formData.get("password")?.toString() ?? "";\n\n  const { data, error } = await POST("/users/login", {\n    body: { user: { email, password } },\n  });\n\n  if (error) {\n    return json({ error }, { status: 400 });\n  } else {\n    return createUserSession({\n      request: request,\n      user: data.user,\n      redirectTo: "/",\n    });\n  }\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/sign-in/ui/SignInPage.tsx"',children:'import { Form, Link, useActionData } from "@remix-run/react";\n\nimport type { signIn } from "../api/sign-in";\n\nexport function SignInPage() {\n  const signInData = useActionData<typeof signIn>();\n\n  return (\n    <div className="auth-page">\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-6 offset-md-3 col-xs-12">\n            <h1 className="text-xs-center">Sign in</h1>\n            <p className="text-xs-center">\n              <Link to="/register">Need an account?</Link>\n            </p>\n\n            {signInData?.error && (\n              <ul className="error-messages">\n                {signInData.error.errors.body.map((error) => (\n                  <li key={error}>{error}</li>\n                ))}\n              </ul>\n            )}\n\n            <Form method="post">\n              <fieldset className="form-group">\n                <input\n                  className="form-control form-control-lg"\n                  name="email"\n                  type="text"\n                  placeholder="Email"\n                />\n              </fieldset>\n              <fieldset className="form-group">\n                <input\n                  className="form-control form-control-lg"\n                  name="password"\n                  type="password"\n                  placeholder="Password"\n                />\n              </fieldset>\n              <button className="btn btn-lg btn-primary pull-xs-right">\n                Sign in\n              </button>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/sign-in/index.ts"',children:"export { RegisterPage } from './ui/RegisterPage';\nexport { register } from './api/register';\nexport { SignInPage } from './ui/SignInPage';\nexport { signIn } from './api/sign-in';\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/login.tsx"',children:'import { SignInPage, signIn } from "pages/sign-in";\n\nexport { signIn as action };\n\nexport default SignInPage;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now let\u2019s give the users a way to actually get to these pages."}),"\n",(0,r.jsx)(n.h3,{id:"header",children:"Header"}),"\n",(0,r.jsx)(n.p,{children:"As we discussed in part 1, the app header is commonly placed either in Widgets or in Shared. We will put it in Shared because it\u2019s very simple and all the business logic can be kept outside of it. Let\u2019s create a place for it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx fsd shared ui\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now create ",(0,r.jsx)(n.code,{children:"shared/ui/Header.tsx"}),"  with the following contents:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/ui/Header.tsx"',children:'import { useContext } from "react";\nimport { Link, useLocation } from "@remix-run/react";\n\nimport { CurrentUser } from "../api/currentUser";\n\nexport function Header() {\n  const currentUser = useContext(CurrentUser);\n  const { pathname } = useLocation();\n\n  return (\n    <nav className="navbar navbar-light">\n      <div className="container">\n        <Link className="navbar-brand" to="/" prefetch="intent">\n          conduit\n        </Link>\n        <ul className="nav navbar-nav pull-xs-right">\n          <li className="nav-item">\n            <Link\n              prefetch="intent"\n              className={`nav-link ${pathname == "/" ? "active" : ""}`}\n              to="/"\n            >\n              Home\n            </Link>\n          </li>\n          {currentUser == null ? (\n            <>\n              <li className="nav-item">\n                <Link\n                  prefetch="intent"\n                  className={`nav-link ${pathname == "/login" ? "active" : ""}`}\n                  to="/login"\n                >\n                  Sign in\n                </Link>\n              </li>\n              <li className="nav-item">\n                <Link\n                  prefetch="intent"\n                  className={`nav-link ${pathname == "/register" ? "active" : ""}`}\n                  to="/register"\n                >\n                  Sign up\n                </Link>\n              </li>\n            </>\n          ) : (\n            <>\n              <li className="nav-item">\n                <Link\n                  prefetch="intent"\n                  className={`nav-link ${pathname == "/editor" ? "active" : ""}`}\n                  to="/editor"\n                >\n                  <i className="ion-compose"></i>&nbsp;New Article{" "}\n                </Link>\n              </li>\n\n              <li className="nav-item">\n                <Link\n                  prefetch="intent"\n                  className={`nav-link ${pathname == "/settings" ? "active" : ""}`}\n                  to="/settings"\n                >\n                  {" "}\n                  <i className="ion-gear-a"></i>&nbsp;Settings{" "}\n                </Link>\n              </li>\n              <li className="nav-item">\n                <Link\n                  prefetch="intent"\n                  className={`nav-link ${pathname.includes("/profile") ? "active" : ""}`}\n                  to={`/profile/${currentUser.username}`}\n                >\n                  {currentUser.image && (\n                    <img\n                      width={25}\n                      height={25}\n                      src={currentUser.image}\n                      className="user-pic"\n                      alt=""\n                    />\n                  )}\n                  {currentUser.username}\n                </Link>\n              </li>\n            </>\n          )}\n        </ul>\n      </div>\n    </nav>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Export this component from ",(0,r.jsx)(n.code,{children:"shared/ui"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/ui/index.ts"',children:'export { Header } from "./Header";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the header, we rely on the context that\u2019s kept in ",(0,r.jsx)(n.code,{children:"shared/api"}),". Create that as well:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/currentUser.ts"',children:'import { createContext } from "react";\n\nimport type { User } from "./models";\n\nexport const CurrentUser = createContext<User | null>(null);\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="shared/api/index.ts"',children:'export { GET, POST, PUT, DELETE } from "./client";\n\nexport type { Article } from "./models";\n\nexport { createUserSession, getUserFromSession, requireUser } from "./auth.server";\nexport { CurrentUser } from "./currentUser";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now let\u2019s add the header to the page. We want it to be on every single page, so it makes sense to simply add it to the root route and wrap the outlet (the place where the page will be rendered) with the ",(0,r.jsx)(n.code,{children:"CurrentUser"})," context provider. This way our entire app and also the header has access to the current user object. We will also add a loader to actually obtain the current user object from cookies. Drop the following into ",(0,r.jsx)(n.code,{children:"app/root.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/root.tsx"',children:'import { cssBundleHref } from "@remix-run/css-bundle";\nimport type { LinksFunction, LoaderFunctionArgs } from "@remix-run/node";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from "@remix-run/react";\n\nimport { Header } from "shared/ui";\nimport { getUserFromSession, CurrentUser } from "shared/api";\n\nexport const links: LinksFunction = () => [\n  ...(cssBundleHref ? [{ rel: "stylesheet", href: cssBundleHref }] : []),\n];\n\nexport const loader = ({ request }: LoaderFunctionArgs) =>\n  getUserFromSession(request);\n\nexport default function App() {\n  const user = useLoaderData<typeof loader>();\n\n  return (\n    <html lang="en">\n      <head>\n        <meta charSet="utf-8" />\n        <meta name="viewport" content="width=device-width, initial-scale=1" />\n        <Meta />\n        <Links />\n        <link\n          href="//code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"\n          rel="stylesheet"\n          type="text/css"\n        />\n        <link\n          href="//fonts.googleapis.com/css?family=Titillium+Web:700|Source+Serif+Pro:400,700|Merriweather+Sans:400,700|Source+Sans+Pro:400,300,600,700,300italic,400italic,600italic,700italic"\n          rel="stylesheet"\n          type="text/css"\n        />\n        <link rel="stylesheet" href="//demo.productionready.io/main.css" />\n        <style>{`\n          button {\n            border: 0;\n          }\n        `}</style>\n      </head>\n      <body>\n        <CurrentUser.Provider value={user}>\n          <Header />\n          <Outlet />\n        </CurrentUser.Provider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"At this point, you should end up with the following on the home page:"}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The feed page of Conduit, including the header, the feed, and the tags. The tabs are still missing.",src:t(2597).A+"",width:"2880",height:"1488"})}),(0,r.jsx)("figcaption",{children:"The feed page of Conduit, including the header, the feed, and the tags. The tabs are still missing."})]}),"\n",(0,r.jsx)(n.h3,{id:"tabs",children:"Tabs"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we can detect the authentication state, let\u2019s also quickly implement the tabs and post likes to be done with the feed page. We need another form, but this page file is getting kind of large, so let\u2019s move these forms into adjacent files. We will create ",(0,r.jsx)(n.code,{children:"Tabs.tsx"}),", ",(0,r.jsx)(n.code,{children:"PopularTags.tsx"}),", and ",(0,r.jsx)(n.code,{children:"Pagination.tsx"})," with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/Tabs.tsx"',children:'import { useContext } from "react";\nimport { Form, useSearchParams } from "@remix-run/react";\n\nimport { CurrentUser } from "shared/api";\n\nexport function Tabs() {\n  const [searchParams] = useSearchParams();\n  const currentUser = useContext(CurrentUser);\n\n  return (\n    <Form>\n      <div className="feed-toggle">\n        <ul className="nav nav-pills outline-active">\n          {currentUser !== null && (\n            <li className="nav-item">\n              <button\n                name="source"\n                value="my-feed"\n                className={`nav-link ${searchParams.get("source") === "my-feed" ? "active" : ""}`}\n              >\n                Your Feed\n              </button>\n            </li>\n          )}\n          <li className="nav-item">\n            <button\n              className={`nav-link ${searchParams.has("tag") || searchParams.has("source") ? "" : "active"}`}\n            >\n              Global Feed\n            </button>\n          </li>\n          {searchParams.has("tag") && (\n            <li className="nav-item">\n              <span className="nav-link active">\n                <i className="ion-pound"></i> {searchParams.get("tag")}\n              </span>\n            </li>\n          )}\n        </ul>\n      </div>\n    </Form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/PopularTags.tsx"',children:'import { Form, useLoaderData } from "@remix-run/react";\nimport { ExistingSearchParams } from "remix-utils/existing-search-params";\n\nimport type { loader } from "../api/loader";\n\nexport function PopularTags() {\n  const { tags } = useLoaderData<typeof loader>();\n\n  return (\n    <div className="sidebar">\n      <p>Popular Tags</p>\n\n      <Form>\n        <ExistingSearchParams exclude={["tag", "page", "source"]} />\n        <div className="tag-list">\n          {tags.tags.map((tag) => (\n            <button\n              key={tag}\n              name="tag"\n              value={tag}\n              className="tag-pill tag-default"\n            >\n              {tag}\n            </button>\n          ))}\n        </div>\n      </Form>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/Pagination.tsx"',children:'import { Form, useLoaderData, useSearchParams } from "@remix-run/react";\nimport { ExistingSearchParams } from "remix-utils/existing-search-params";\n\nimport { LIMIT, type loader } from "../api/loader";\n\nexport function Pagination() {\n  const [searchParams] = useSearchParams();\n  const { articles } = useLoaderData<typeof loader>();\n  const pageAmount = Math.ceil(articles.articlesCount / LIMIT);\n  const currentPage = parseInt(searchParams.get("page") ?? "1", 10);\n\n  return (\n    <Form>\n      <ExistingSearchParams exclude={["page"]} />\n      <ul className="pagination">\n        {Array(pageAmount)\n          .fill(null)\n          .map((_, index) =>\n            index + 1 === currentPage ? (\n              <li key={index} className="page-item active">\n                <span className="page-link">{index + 1}</span>\n              </li>\n            ) : (\n              <li key={index} className="page-item">\n                <button className="page-link" name="page" value={index + 1}>\n                  {index + 1}\n                </button>\n              </li>\n            ),\n          )}\n      </ul>\n    </Form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And now we can significantly simplify the feed page itself:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/FeedPage.tsx"',children:'import { useLoaderData } from "@remix-run/react";\n\nimport type { loader } from "../api/loader";\nimport { ArticlePreview } from "./ArticlePreview";\nimport { Tabs } from "./Tabs";\nimport { PopularTags } from "./PopularTags";\nimport { Pagination } from "./Pagination";\n\nexport function FeedPage() {\n  const { articles } = useLoaderData<typeof loader>();\n\n  return (\n    <div className="home-page">\n      <div className="banner">\n        <div className="container">\n          <h1 className="logo-font">conduit</h1>\n          <p>A place to share your knowledge.</p>\n        </div>\n      </div>\n\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-9">\n            <Tabs />\n\n            {articles.articles.map((article) => (\n              <ArticlePreview key={article.slug} article={article} />\n            ))}\n\n            <Pagination />\n          </div>\n\n          <div className="col-md-3">\n            <PopularTags />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We also need to account for the new tab in the loader function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/api/loader.ts"',children:'import { json, type LoaderFunctionArgs } from "@remix-run/node";\nimport type { FetchResponse } from "openapi-fetch";\nimport { promiseHash } from "remix-utils/promise";\n\nimport { GET, requireUser } from "shared/api";\n\nasync function throwAnyErrors<T, O, Media extends `${string}/${string}`>(\n  responsePromise: Promise<FetchResponse<T, O, Media>>,\n) {\n  /* unchanged */\n}\n\n/** Amount of articles on one page. */\nexport const LIMIT = 20;\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const url = new URL(request.url);\n  const selectedTag = url.searchParams.get("tag") ?? undefined;\n  const page = parseInt(url.searchParams.get("page") ?? "", 10);\n\n  if (url.searchParams.get("source") === "my-feed") {\n    const userSession = await requireUser(request);\n\n    return json(\n      await promiseHash({\n        articles: throwAnyErrors(\n          GET("/articles/feed", {\n            params: {\n              query: {\n                limit: LIMIT,\n                offset: !Number.isNaN(page) ? page * LIMIT : undefined,\n              },\n            },\n            headers: { Authorization: `Token ${userSession.token}` },\n          }),\n        ),\n        tags: throwAnyErrors(GET("/tags")),\n      }),\n    );\n  }\n\n  return json(\n    await promiseHash({\n      articles: throwAnyErrors(\n        GET("/articles", {\n          params: {\n            query: {\n              tag: selectedTag,\n              limit: LIMIT,\n              offset: !Number.isNaN(page) ? page * LIMIT : undefined,\n            },\n          },\n        }),\n      ),\n      tags: throwAnyErrors(GET("/tags")),\n    }),\n  );\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Before we leave the feed page, let\u2019s add some code that handles likes to posts. Change your ",(0,r.jsx)(n.code,{children:"ArticlePreview.tsx"})," to the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/feed/ui/ArticlePreview.tsx"',children:'import { Form, Link } from "@remix-run/react";\nimport type { Article } from "shared/api";\n\ninterface ArticlePreviewProps {\n  article: Article;\n}\n\nexport function ArticlePreview({ article }: ArticlePreviewProps) {\n  return (\n    <div className="article-preview">\n      <div className="article-meta">\n        <Link to={`/profile/${article.author.username}`} prefetch="intent">\n          <img src={article.author.image} alt="" />\n        </Link>\n        <div className="info">\n          <Link\n            to={`/profile/${article.author.username}`}\n            className="author"\n            prefetch="intent"\n          >\n            {article.author.username}\n          </Link>\n          <span className="date" suppressHydrationWarning>\n            {new Date(article.createdAt).toLocaleDateString(undefined, {\n              dateStyle: "long",\n            })}\n          </span>\n        </div>\n        <Form\n          method="post"\n          action={`/article/${article.slug}`}\n          preventScrollReset\n        >\n          <button\n            name="_action"\n            value={article.favorited ? "unfavorite" : "favorite"}\n            className={`btn ${article.favorited ? "btn-primary" : "btn-outline-primary"} btn-sm pull-xs-right`}\n          >\n            <i className="ion-heart"></i> {article.favoritesCount}\n          </button>\n        </Form>\n      </div>\n      <Link\n        to={`/article/${article.slug}`}\n        className="preview-link"\n        prefetch="intent"\n      >\n        <h1>{article.title}</h1>\n        <p>{article.description}</p>\n        <span>Read more...</span>\n        <ul className="tag-list">\n          {article.tagList.map((tag) => (\n            <li key={tag} className="tag-default tag-pill tag-outline">\n              {tag}\n            </li>\n          ))}\n        </ul>\n      </Link>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This code will send a POST request to ",(0,r.jsx)(n.code,{children:"/article/:slug"}),"  with ",(0,r.jsx)(n.code,{children:"_action=favorite"})," to mark the article as favorite. It won\u2019t work yet, but as we start working on the article reader, we will implement this too."]}),"\n",(0,r.jsx)(n.p,{children:"And with that we are officially done with the feed! Yay!"}),"\n",(0,r.jsx)(n.h3,{id:"article-reader",children:"Article reader"}),"\n",(0,r.jsx)(n.p,{children:"First, we need data. Let\u2019s create a loader:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx fsd pages article-read -s api\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/api/loader.ts"',children:'import { json, type LoaderFunctionArgs } from "@remix-run/node";\nimport invariant from "tiny-invariant";\nimport type { FetchResponse } from "openapi-fetch";\nimport { promiseHash } from "remix-utils/promise";\n\nimport { GET, getUserFromSession } from "shared/api";\n\nasync function throwAnyErrors<T, O, Media extends `${string}/${string}`>(\n  responsePromise: Promise<FetchResponse<T, O, Media>>,\n) {\n  const { data, error, response } = await responsePromise;\n\n  if (error !== undefined) {\n    throw json(error, { status: response.status });\n  }\n\n  return data as NonNullable<typeof data>;\n}\n\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\n  invariant(params.slug, "Expected a slug parameter");\n  const currentUser = await getUserFromSession(request);\n  const authorization = currentUser\n    ? { Authorization: `Token ${currentUser.token}` }\n    : undefined;\n\n  return json(\n    await promiseHash({\n      article: throwAnyErrors(\n        GET("/articles/{slug}", {\n          params: {\n            path: { slug: params.slug },\n          },\n          headers: authorization,\n        }),\n      ),\n      comments: throwAnyErrors(\n        GET("/articles/{slug}/comments", {\n          params: {\n            path: { slug: params.slug },\n          },\n          headers: authorization,\n        }),\n      ),\n    }),\n  );\n};\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/index.ts"',children:'export { loader } from "./api/loader";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now we can connect it to the route ",(0,r.jsx)(n.code,{children:"/article/:slug"})," by creating the a route file called ",(0,r.jsx)(n.code,{children:"article.$slug.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/article.$slug.tsx"',children:'export { loader } from "pages/article-read";\n'})}),"\n",(0,r.jsx)(n.p,{children:"The page itself consists of three main blocks \u2014 the article header with actions (repeated twice), the article body, and the comments section. This is the markup for the page, it\u2019s not particularly interesting:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/ui/ArticleReadPage.tsx"',children:'import { useLoaderData } from "@remix-run/react";\n\nimport type { loader } from "../api/loader";\nimport { ArticleMeta } from "./ArticleMeta";\nimport { Comments } from "./Comments";\n\nexport function ArticleReadPage() {\n  const { article } = useLoaderData<typeof loader>();\n\n  return (\n    <div className="article-page">\n      <div className="banner">\n        <div className="container">\n          <h1>{article.article.title}</h1>\n\n          <ArticleMeta />\n        </div>\n      </div>\n\n      <div className="container page">\n        <div className="row article-content">\n          <div className="col-md-12">\n            <p>{article.article.body}</p>\n            <ul className="tag-list">\n              {article.article.tagList.map((tag) => (\n                <li className="tag-default tag-pill tag-outline" key={tag}>\n                  {tag}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <hr />\n\n        <div className="article-actions">\n          <ArticleMeta />\n        </div>\n\n        <div className="row">\n          <Comments />\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["What\u2019s more interesting is the ",(0,r.jsx)(n.code,{children:"ArticleMeta"})," and ",(0,r.jsx)(n.code,{children:"Comments"}),". They contain write operations such as liking an article, leaving a comment, etc. To get them to work, we first need to implement the backend part. Create ",(0,r.jsx)(n.code,{children:"action.ts"})," in the ",(0,r.jsx)(n.code,{children:"api"})," segment of the page:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/api/action.ts"',children:'import { redirect, type ActionFunctionArgs } from "@remix-run/node";\nimport { namedAction } from "remix-utils/named-action";\nimport { redirectBack } from "remix-utils/redirect-back";\nimport invariant from "tiny-invariant";\n\nimport { DELETE, POST, requireUser } from "shared/api";\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  const currentUser = await requireUser(request);\n\n  const authorization = { Authorization: `Token ${currentUser.token}` };\n\n  const formData = await request.formData();\n\n  return namedAction(formData, {\n    async delete() {\n      invariant(params.slug, "Expected a slug parameter");\n      await DELETE("/articles/{slug}", {\n        params: { path: { slug: params.slug } },\n        headers: authorization,\n      });\n      return redirect("/");\n    },\n    async favorite() {\n      invariant(params.slug, "Expected a slug parameter");\n      await POST("/articles/{slug}/favorite", {\n        params: { path: { slug: params.slug } },\n        headers: authorization,\n      });\n      return redirectBack(request, { fallback: "/" });\n    },\n    async unfavorite() {\n      invariant(params.slug, "Expected a slug parameter");\n      await DELETE("/articles/{slug}/favorite", {\n        params: { path: { slug: params.slug } },\n        headers: authorization,\n      });\n      return redirectBack(request, { fallback: "/" });\n    },\n    async createComment() {\n      invariant(params.slug, "Expected a slug parameter");\n      const comment = formData.get("comment");\n      invariant(typeof comment === "string", "Expected a comment parameter");\n      await POST("/articles/{slug}/comments", {\n        params: { path: { slug: params.slug } },\n        headers: { ...authorization, "Content-Type": "application/json" },\n        body: { comment: { body: comment } },\n      });\n      return redirectBack(request, { fallback: "/" });\n    },\n    async deleteComment() {\n      invariant(params.slug, "Expected a slug parameter");\n      const commentId = formData.get("id");\n      invariant(typeof commentId === "string", "Expected an id parameter");\n      const commentIdNumeric = parseInt(commentId, 10);\n      invariant(\n        !Number.isNaN(commentIdNumeric),\n        "Expected a numeric id parameter",\n      );\n      await DELETE("/articles/{slug}/comments/{id}", {\n        params: { path: { slug: params.slug, id: commentIdNumeric } },\n        headers: authorization,\n      });\n      return redirectBack(request, { fallback: "/" });\n    },\n    async followAuthor() {\n      const authorUsername = formData.get("username");\n      invariant(\n        typeof authorUsername === "string",\n        "Expected a username parameter",\n      );\n      await POST("/profiles/{username}/follow", {\n        params: { path: { username: authorUsername } },\n        headers: authorization,\n      });\n      return redirectBack(request, { fallback: "/" });\n    },\n    async unfollowAuthor() {\n      const authorUsername = formData.get("username");\n      invariant(\n        typeof authorUsername === "string",\n        "Expected a username parameter",\n      );\n      await DELETE("/profiles/{username}/follow", {\n        params: { path: { username: authorUsername } },\n        headers: authorization,\n      });\n      return redirectBack(request, { fallback: "/" });\n    },\n  });\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"Export that from the slice and then from the route. While we\u2019re at it, let\u2019s also connect the page itself:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/index.ts"',children:'export { ArticleReadPage } from "./ui/ArticleReadPage";\nexport { loader } from "./api/loader";\nexport { action } from "./api/action";\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/article.$slug.tsx"',children:'import { ArticleReadPage } from "pages/article-read";\n\nexport { loader, action } from "pages/article-read";\n\nexport default ArticleReadPage;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now, even though we haven\u2019t implemented the like button on the reader page yet, the like button in the feed will start working! That\u2019s because it\u2019s been sending \u201Clike\u201D requests to this route. Give that a try."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ArticleMeta"})," and ",(0,r.jsx)(n.code,{children:"Comments"})," are, again, a bunch of forms. We\u2019ve done this before, let\u2019s grab their code and move on:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/ui/ArticleMeta.tsx"',children:'import { Form, Link, useLoaderData } from "@remix-run/react";\nimport { useContext } from "react";\n\nimport { CurrentUser } from "shared/api";\nimport type { loader } from "../api/loader";\n\nexport function ArticleMeta() {\n  const currentUser = useContext(CurrentUser);\n  const { article } = useLoaderData<typeof loader>();\n\n  return (\n    <Form method="post">\n      <div className="article-meta">\n        <Link\n          prefetch="intent"\n          to={`/profile/${article.article.author.username}`}\n        >\n          <img src={article.article.author.image} alt="" />\n        </Link>\n\n        <div className="info">\n          <Link\n            prefetch="intent"\n            to={`/profile/${article.article.author.username}`}\n            className="author"\n          >\n            {article.article.author.username}\n          </Link>\n          <span className="date">{article.article.createdAt}</span>\n        </div>\n\n        {article.article.author.username == currentUser?.username ? (\n          <>\n            <Link\n              prefetch="intent"\n              to={`/editor/${article.article.slug}`}\n              className="btn btn-sm btn-outline-secondary"\n            >\n              <i className="ion-edit"></i> Edit Article\n            </Link>\n            &nbsp;&nbsp;\n            <button\n              name="_action"\n              value="delete"\n              className="btn btn-sm btn-outline-danger"\n            >\n              <i className="ion-trash-a"></i> Delete Article\n            </button>\n          </>\n        ) : (\n          <>\n            <input\n              name="username"\n              value={article.article.author.username}\n              type="hidden"\n            />\n            <button\n              name="_action"\n              value={\n                article.article.author.following\n                  ? "unfollowAuthor"\n                  : "followAuthor"\n              }\n              className={`btn btn-sm ${article.article.author.following ? "btn-secondary" : "btn-outline-secondary"}`}\n            >\n              <i className="ion-plus-round"></i>\n              &nbsp;{" "}\n              {article.article.author.following\n                ? "Unfollow"\n                : "Follow"}{" "}\n              {article.article.author.username}\n            </button>\n            &nbsp;&nbsp;\n            <button\n              name="_action"\n              value={article.article.favorited ? "unfavorite" : "favorite"}\n              className={`btn btn-sm ${article.article.favorited ? "btn-primary" : "btn-outline-primary"}`}\n            >\n              <i className="ion-heart"></i>\n              &nbsp; {article.article.favorited\n                ? "Unfavorite"\n                : "Favorite"}{" "}\n              Post{" "}\n              <span className="counter">\n                ({article.article.favoritesCount})\n              </span>\n            </button>\n          </>\n        )}\n      </div>\n    </Form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-read/ui/Comments.tsx"',children:'import { useContext } from "react";\nimport { Form, Link, useLoaderData } from "@remix-run/react";\n\nimport { CurrentUser } from "shared/api";\nimport type { loader } from "../api/loader";\n\nexport function Comments() {\n  const { comments } = useLoaderData<typeof loader>();\n  const currentUser = useContext(CurrentUser);\n\n  return (\n    <div className="col-xs-12 col-md-8 offset-md-2">\n      {currentUser !== null ? (\n        <Form\n          preventScrollReset={true}\n          method="post"\n          className="card comment-form"\n        >\n          <div className="card-block">\n            <textarea\n              required\n              className="form-control"\n              name="comment"\n              placeholder="Write a comment..."\n              rows={3}\n            ></textarea>\n          </div>\n          <div className="card-footer">\n            <img\n              src={currentUser.image}\n              className="comment-author-img"\n              alt=""\n            />\n            <button\n              className="btn btn-sm btn-primary"\n              name="_action"\n              value="createComment"\n            >\n              Post Comment\n            </button>\n          </div>\n        </Form>\n      ) : (\n        <div className="row">\n          <div className="col-xs-12 col-md-8 offset-md-2">\n            <p>\n              <Link to="/login">Sign in</Link>\n              &nbsp; or &nbsp;\n              <Link to="/register">Sign up</Link>\n              &nbsp; to add comments on this article.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {comments.comments.map((comment) => (\n        <div className="card" key={comment.id}>\n          <div className="card-block">\n            <p className="card-text">{comment.body}</p>\n          </div>\n\n          <div className="card-footer">\n            <Link\n              to={`/profile/${comment.author.username}`}\n              className="comment-author"\n            >\n              <img\n                src={comment.author.image}\n                className="comment-author-img"\n                alt=""\n              />\n            </Link>\n            &nbsp;\n            <Link\n              to={`/profile/${comment.author.username}`}\n              className="comment-author"\n            >\n              {comment.author.username}\n            </Link>\n            <span className="date-posted">{comment.createdAt}</span>\n            {comment.author.username === currentUser?.username && (\n              <span className="mod-options">\n                <Form method="post" preventScrollReset={true}>\n                  <input type="hidden" name="id" value={comment.id} />\n                  <button\n                    name="_action"\n                    value="deleteComment"\n                    style={{\n                      border: "none",\n                      outline: "none",\n                      backgroundColor: "transparent",\n                    }}\n                  >\n                    <i className="ion-trash-a"></i>\n                  </button>\n                </Form>\n              </span>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And with that our article reader is also complete! The buttons to follow the author, like a post, and leave a comment should now function as expected."}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Article reader with functioning buttons to like and follow",src:t(4239).A+"",width:"2880",height:"1488"})}),(0,r.jsx)("figcaption",{children:"Article reader with functioning buttons to like and follow"})]}),"\n",(0,r.jsx)(n.h3,{id:"article-editor",children:"Article editor"}),"\n",(0,r.jsx)(n.p,{children:"This is the last page that we will cover in this tutorial, and the most interesting part here is how we\u2019re going to validate form data."}),"\n",(0,r.jsxs)(n.p,{children:["The page itself, ",(0,r.jsx)(n.code,{children:"article-edit/ui/ArticleEditPage.tsx"}),", will be quite simple, extra complexity stowed away into two other components:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-edit/ui/ArticleEditPage.tsx"',children:'import { Form, useLoaderData } from "@remix-run/react";\n\nimport type { loader } from "../api/loader";\nimport { TagsInput } from "./TagsInput";\nimport { FormErrors } from "./FormErrors";\n\nexport function ArticleEditPage() {\n  const article = useLoaderData<typeof loader>();\n\n  return (\n    <div className="editor-page">\n      <div className="container page">\n        <div className="row">\n          <div className="col-md-10 offset-md-1 col-xs-12">\n            <FormErrors />\n\n            <Form method="post">\n              <fieldset>\n                <fieldset className="form-group">\n                  <input\n                    type="text"\n                    className="form-control form-control-lg"\n                    name="title"\n                    placeholder="Article Title"\n                    defaultValue={article.article?.title}\n                  />\n                </fieldset>\n                <fieldset className="form-group">\n                  <input\n                    type="text"\n                    className="form-control"\n                    name="description"\n                    placeholder="What\'s this article about?"\n                    defaultValue={article.article?.description}\n                  />\n                </fieldset>\n                <fieldset className="form-group">\n                  <textarea\n                    className="form-control"\n                    name="body"\n                    rows={8}\n                    placeholder="Write your article (in markdown)"\n                    defaultValue={article.article?.body}\n                  ></textarea>\n                </fieldset>\n                <fieldset className="form-group">\n                  <TagsInput\n                    name="tags"\n                    defaultValue={article.article?.tagList ?? []}\n                  />\n                </fieldset>\n\n                <button className="btn btn-lg pull-xs-right btn-primary">\n                  Publish Article\n                </button>\n              </fieldset>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This page gets the current article (unless we\u2019re writing from scratch) and fills in the corresponding form fields. We\u2019ve seen this before. The interesting part is ",(0,r.jsx)(n.code,{children:"FormErrors"}),", because it will receive the validation result and display it to the user. Let\u2019s take a look:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-edit/ui/FormErrors.tsx"',children:'import { useActionData } from "@remix-run/react";\nimport type { action } from "../api/action";\n\nexport function FormErrors() {\n  const actionData = useActionData<typeof action>();\n\n  return actionData?.errors != null ? (\n    <ul className="error-messages">\n      {actionData.errors.map((error) => (\n        <li key={error}>{error}</li>\n      ))}\n    </ul>\n  ) : null;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here we are assuming that our action will return the ",(0,r.jsx)(n.code,{children:"errors"})," field, an array of human-readable error messages. We will get to the action shortly."]}),"\n",(0,r.jsx)(n.p,{children:"Another component is the tags input. It\u2019s just a plain input field with an additional preview of chosen tags. Not much to see here:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-edit/ui/TagsInput.tsx"',children:'import { useEffect, useRef, useState } from "react";\n\nexport function TagsInput({\n  name,\n  defaultValue,\n}: {\n  name: string;\n  defaultValue?: Array<string>;\n}) {\n  const [tagListState, setTagListState] = useState(defaultValue ?? []);\n\n  function removeTag(tag: string): void {\n    const newTagList = tagListState.filter((t) => t !== tag);\n    setTagListState(newTagList);\n  }\n\n  const tagsInput = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    tagsInput.current && (tagsInput.current.value = tagListState.join(","));\n  }, [tagListState]);\n\n  return (\n    <>\n      <input\n        type="text"\n        className="form-control"\n        id="tags"\n        name={name}\n        placeholder="Enter tags"\n        defaultValue={tagListState.join(",")}\n        onChange={(e) =>\n          setTagListState(e.target.value.split(",").filter(Boolean))\n        }\n      />\n      <div className="tag-list">\n        {tagListState.map((tag) => (\n          <span className="tag-default tag-pill" key={tag}>\n            <i\n              className="ion-close-round"\n              role="button"\n              tabIndex={0}\n              onKeyDown={(e) =>\n                [" ", "Enter"].includes(e.key) && removeTag(tag)\n              }\n              onClick={() => removeTag(tag)}\n            ></i>{" "}\n            {tag}\n          </span>\n        ))}\n      </div>\n    </>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now, for the API part. The loader should look at the URL, and if it contains an article slug, that means we\u2019re editing an existing article, and its data should be loaded. Otherwise, return nothing. Let\u2019s create that loader:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="pages/article-edit/api/loader.ts"',children:'import { json, type LoaderFunctionArgs } from "@remix-run/node";\nimport type { FetchResponse } from "openapi-fetch";\n\nimport { GET, requireUser } from "shared/api";\n\nasync function throwAnyErrors<T, O, Media extends `${string}/${string}`>(\n  responsePromise: Promise<FetchResponse<T, O, Media>>,\n) {\n  const { data, error, response } = await responsePromise;\n\n  if (error !== undefined) {\n    throw json(error, { status: response.status });\n  }\n\n  return data as NonNullable<typeof data>;\n}\n\nexport const loader = async ({ params, request }: LoaderFunctionArgs) => {\n  const currentUser = await requireUser(request);\n\n  if (!params.slug) {\n    return { article: null };\n  }\n\n  return throwAnyErrors(\n    GET("/articles/{slug}", {\n      params: { path: { slug: params.slug } },\n      headers: { Authorization: `Token ${currentUser.token}` },\n    }),\n  );\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"The action will take the new field values, run them through our data schema, and if everything is correct, commit those changes to the backend, either by updating an existing article or creating a new one:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-edit/api/action.ts"',children:'import { json, redirect, type ActionFunctionArgs } from "@remix-run/node";\n\nimport { POST, PUT, requireUser } from "shared/api";\nimport { parseAsArticle } from "../model/parseAsArticle";\n\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\n  try {\n    const { body, description, title, tags } = parseAsArticle(\n      await request.formData(),\n    );\n    const tagList = tags?.split(",") ?? [];\n\n    const currentUser = await requireUser(request);\n    const payload = {\n      body: {\n        article: {\n          title,\n          description,\n          body,\n          tagList,\n        },\n      },\n      headers: { Authorization: `Token ${currentUser.token}` },\n    };\n\n    const { data, error } = await (params.slug\n      ? PUT("/articles/{slug}", {\n          params: { path: { slug: params.slug } },\n          ...payload,\n        })\n      : POST("/articles", payload));\n\n    if (error) {\n      return json({ errors: error }, { status: 422 });\n    }\n\n    return redirect(`/article/${data.article.slug ?? ""}`);\n  } catch (errors) {\n    return json({ errors }, { status: 400 });\n  }\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The schema doubles as a parsing function for ",(0,r.jsx)(n.code,{children:"FormData"}),", which allows us to conveniently get the clean fields or just throw the errors to handle at the end. Here\u2019s how that parsing function could look:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-edit/model/parseAsArticle.ts"',children:'export function parseAsArticle(data: FormData) {\n  const errors = [];\n\n  const title = data.get("title");\n  if (typeof title !== "string" || title === "") {\n    errors.push("Give this article a title");\n  }\n\n  const description = data.get("description");\n  if (typeof description !== "string" || description === "") {\n    errors.push("Describe what this article is about");\n  }\n\n  const body = data.get("body");\n  if (typeof body !== "string" || body === "") {\n    errors.push("Write the article itself");\n  }\n\n  const tags = data.get("tags");\n  if (typeof tags !== "string") {\n    errors.push("The tags must be a string");\n  }\n\n  if (errors.length > 0) {\n    throw errors;\n  }\n\n  return { title, description, body, tags: data.get("tags") ?? "" } as {\n    title: string;\n    description: string;\n    body: string;\n    tags: string;\n  };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Arguably, it\u2019s a bit lengthy and repetitive, but that\u2019s the price we pay for human-readable errors. This could also be a Zod schema, for example, but then we would have to render error messages on the frontend, and this form is not worth the complication."}),"\n",(0,r.jsxs)(n.p,{children:["One last step \u2014 connect the page, the loader, and the action to the routes. Since we neatly support both creation and editing, we can export the same thing from both ",(0,r.jsx)(n.code,{children:"editor._index.tsx"})," and ",(0,r.jsx)(n.code,{children:"editor.$slug.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="pages/article-edit/index.ts"',children:'export { ArticleEditPage } from "./ui/ArticleEditPage";\nexport { loader } from "./api/loader";\nexport { action } from "./api/action";\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="app/routes/editor._index.tsx, app/routes/editor.$slug.tsx (same content)"',children:'import { ArticleEditPage } from "pages/article-edit";\n\nexport { loader, action } from "pages/article-edit";\n\nexport default ArticleEditPage;\n'})}),"\n",(0,r.jsx)(n.p,{children:"We\u2019re done now! Log in and try creating a new article. Or \u201Cforget\u201D to write the article and see the validation kick in."}),"\n",(0,r.jsxs)("figure",{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"The Conduit article editor, with the title field saying \u201CNew article\u201D and the rest of the fields empty. Above the form there are two errors: \u201CDescribe what this article is about\u201D and \u201CWrite the article itself\u201D.",src:t(7777).A+"",width:"2880",height:"1488"})}),(0,r.jsxs)("figcaption",{children:["The Conduit article editor, with the title field saying \u201CNew article\u201D and the rest of the fields empty. Above the form there are two errors: ",(0,r.jsx)(n.strong,{children:"\u201CDescribe what this article is about\u201D"})," and ",(0,r.jsx)(n.strong,{children:"\u201CWrite the article itself\u201D"}),"."]})]}),"\n",(0,r.jsx)(n.p,{children:"The profile and settings pages are very similar to the article reader and editor, they are left as an exercise for the reader, that\u2019s you :)"})]})}function h(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1565:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/conduit-banner-a20e38edcd109ee21a8b1426d93a66b3.jpg"},7777:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/realworld-article-editor-bc3ee45c96ae905fdbb54d6463d12723.jpg"},4239:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/realworld-article-reader-6a420e4f2afe139d2bdd54d62974f0b9.jpg"},5888:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/realworld-editor-authenticated-10de4d01479270886859e08592045b1e.jpg"},6549:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/realworld-feed-anonymous-8cbba45f488931979f6c8da8968ad685.jpg"},4919:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/realworld-feed-authenticated-15427d9ff7baae009b47b501bee6c059.jpg"},2597:function(e,n,t){t.d(n,{A:()=>a});let a=t.p+"assets/images/realworld-feed-without-tabs-5da4c9072101ac20e82e2234bd3badbe.jpg"},6436:function(e,n,t){t.d(n,{R:()=>i,x:()=>o});var a=t(9729);let r={},s=a.createContext(r);function i(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);